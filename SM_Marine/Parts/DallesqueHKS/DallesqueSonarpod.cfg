PART
{
// Kerbal Space Program - Part Config
// 
// 

// --- general parameters ---
	name = DallesqueSonarPod
module = Part
author = Spanner

// --- asset parameters ---
buoyancy = 0
 MODEL
	{
		model = SM_Marine/Parts/DallesqueHKS/DallesqueSonarPod
		scale = 1.0, 1.0, 1.0
	} 
rescaleFactor = 1


// --- node definitions ---
node_attach = 0.0, -0.0, 0, 0, -1, 0, 0


// --- editor parameters ---
TechRequired = precisionEngineering
entryCost = 2100
cost = 600
category = none
subcategory = 0
		title = #autoLOC_SMIndustries_1000136	//#autoLOC_SMIndustries_1000136 = Dallesque Sonar Pod
manufacturer = SM Marine
		description = #autoLOC_SMIndustries_1000137	//#autoLOC_SMIndustries_1000137 = Dallesque Sonar pod
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 0,1,0,0,1

// --- standard part parameters ---
mass = 0.001
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 7
maxTemp = 3600

MODULE
{
  name = ModuleRadar
  scanRotationSpeed = 110
  showDirectionWhileScan = true
  rotationTransformName = shaft//rotationTransform
  canLock = true
  canRecieveRadarData = true
  canTrackWhileScan = true
  rwrThreatType = 6

   resourceDrain = 1.15
        
    maxLocks = 1
     
    radarGroundClutterFactor = 0.35     //not so good at breaking depth barriers
   radarDetectionCurve
        {
          // floatcurve to define at what range (km) which minimum cross section (m^2) can be detected.
          // this defines both min/max range of the radar, and sensitivity/efficiency
          // it is recommended to define an "assured detection range", at which all craft are detected regardless
          //     of their rcs. This is achieved by using a minrcs value of zero, thus detecting everything.
          //    key = distance	rcs
                key = 0.0	0
                //key = 3	    0	//between 0 and 5 km the min cross section is 0, thus assured detection of everything
                key = 5    0
                key = 10    25
                key = 20    45
                key = 30    85
        }

        radarLockTrackCurve
        {
            // same as detectionCurve, just for locking/tracking purpose
                    // ATTENTION: DO NOT USE an "assured locking range" here, as this would render lock-breaking
                    //   ECM-jammers & chaff completely ineffective!!
                key = 0.0	0
                key = 3	    5	//needs more noise to realibly lock at comparable range though
                key = 5    15
                key = 10    35
                key = 20    65
                key = 30    95
        }
    }
  }

